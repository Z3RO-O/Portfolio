/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ʜᴀᴄᴋᴇʀ (https://sketchfab.com/infohack)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hacker-face-ecb2e2a0801e4914b8b5420fe8662300
Title: Hacker Face
*/

import { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { hacker_face } from '@/assets/assets';
import { a } from '@react-spring/three';
import * as THREE from 'three';
import type { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    path4155__0: THREE.Mesh;
    path4153__0: THREE.Mesh;
    path4151__0: THREE.Mesh;
    path4149__0: THREE.Mesh;
    path4147__0: THREE.Mesh;
    path4145__0: THREE.Mesh;
    path4141__0: THREE.Mesh;
    path4137__0: THREE.Mesh;
    path4138__0: THREE.Mesh;
    path4159__0: THREE.Mesh;
  };
  materials: {
    'Scene_-_Root': THREE.Material;
  };
};

interface MaskProps {
  isRotating: boolean;
  setIsRotating: (value: boolean) => void;
  setCurrentStage: (stage: number | null) => void;
  currentFocusPoint?: unknown;
  [key: string]: unknown;
}

const Mask = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}: MaskProps) => {
  const { nodes, materials } = useGLTF(hacker_face) as unknown as GLTFResult;
  const maskRef = useRef<THREE.Group | null>(null);
  const { gl, viewport } = useThree();
  const lastX = useRef<number>(0);
  const rotationSpeed = useRef<number>(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (event: PointerEvent | TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    const clientX =
      'touches' in event ? event.touches[0].clientX : event.clientX;
    lastX.current = clientX;
  };

  const handlePointerUp = (event: PointerEvent | TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (event: PointerEvent | TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      const clientX =
        'touches' in event ? event.touches[0].clientX : event.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      if (maskRef.current) {
        maskRef.current.rotation.y += delta * 0.01 * Math.PI;
      }

      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true);

      if (maskRef.current) {
        maskRef.current.rotation.y += 0.005 * Math.PI;
      }
      rotationSpeed.current = 0.007;
    } else if (event.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true);

      if (maskRef.current) {
        maskRef.current.rotation.y -= 0.005 * Math.PI;
      }
      rotationSpeed.current = -0.007;
    }
  };

  const handleKeyUp = (event: KeyboardEvent) => {
    if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown as EventListener);
    canvas.addEventListener('pointerup', handlePointerUp as EventListener);
    canvas.addEventListener('pointermove', handlePointerMove as EventListener);
    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener(
        'pointerdown',
        handlePointerDown as EventListener
      );
      canvas.removeEventListener('pointerup', handlePointerUp as EventListener);
      canvas.removeEventListener(
        'pointermove',
        handlePointerMove as EventListener
      );
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, [gl, isRotating]);

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      if (maskRef.current) {
        maskRef.current.rotation.y += rotationSpeed.current;
      }
    } else {
      if (maskRef.current) {
        const rotation = maskRef.current.rotation.y;
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    }
  });

  return (
    <a.group ref={maskRef} {...props} dispose={null}>
      <a.group scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4155__0.geometry}
          material={materials['Scene_-_Root']}
          position={[10.922, 312.065, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4153__0.geometry}
          material={materials['Scene_-_Root']}
          position={[-1.136, 678.209, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4151__0.geometry}
          material={materials['Scene_-_Root']}
          position={[3.052, 544.902, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4149__0.geometry}
          material={materials['Scene_-_Root']}
          position={[9.003, 948.134, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4147__0.geometry}
          material={materials['Scene_-_Root']}
          position={[-143.856, 793.626, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4145__0.geometry}
          material={materials['Scene_-_Root']}
          position={[167.565, 795.262, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4141__0.geometry}
          material={materials['Scene_-_Root']}
          position={[-472.901, 1208.817, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4137__0.geometry}
          material={materials['Scene_-_Root']}
          position={[486.813, 1208.368, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4138__0.geometry}
          material={materials['Scene_-_Root']}
          position={[-280.596, 1472.776, 43.067]}
          scale={9518.728}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.path4159__0.geometry}
          material={materials['Scene_-_Root']}
          position={[302.063, 1472.776, 43.067]}
          scale={9518.728}
        />
      </a.group>
    </a.group>
  );
};

export default Mask;
